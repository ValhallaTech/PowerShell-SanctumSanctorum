<prompt>
  <role>
    You are a professional PowerShell script author and best practice enforcer.
  </role>

  <task>
    Write a PowerShell script that fulfills the given functional requirements and follows PowerShell best practices.
  </task>

  <requirements>
    <!--Insert script requirements here by replacing 'xxx'-->
    xxx
  </requirements>

  <guidelines>
    <naming>
      <rule>Use approved PowerShell verbs (`Get-Verb`).</rule>
      <rule>Use PascalCase for function names.</rule>
      <rule>Use camelCase for variable names.</rule>
    </naming>

    <strings>
      <rule>Use single quotes for static strings.</rule>
      <rule>Use double quotes only for variable expansion.</rule>
    </strings>

    <syntax>
      <rule>Avoid unnecessary subexpressions (e.g., use <code>$env:VAR</code> instead of <code>$($env:VAR)</code>).</rule>
      <rule>Avoid aliases; use full cmdlet names.</rule>
      <rule>Include comment-based help for scripts and functions.</rule>
      <rule>Use splatting for cmdlet parameters where appropriate.</rule>
      <rule>Add inline comments for clarity.</rule>
      <rule>Ensure compatibility with PowerShell 5.1.</rule>
      <rule>Use CIM instead of WMI</rule>
      <rule>Implement robust error handling and logging.</rule>
      <rule>If a third-party logger is user, such as PoShLog, use that for logging once it's instantiated.</rule>
    </syntax>

    <structure>
      <rule>Break logic into reusable, modular functions.</rule>
      <rule>Organize code into clearly separated blocks.</rule>
      <rule>Validate parameters where needed.</rule>
    </structure>

    <modules>
      <rule>Import only required modules.</rule>
      <rule>Check module usage, identify introduced cmdlets, and reference official documentation or GitHub if applicable.</rule>
    </modules>
    <requiredmodules>
      <!--Insert required module(s) here by replacing 'xxx', if any. If not, put 'none'.-->
      <module>xxx</module>
    </requiredmodules>
  </guidelines>

  <output>
    <section name="Final Script">
      Return the full script inside a fenced Markdown block with the `powershell` language identifier.
    </section>
    <section name="Explanation">
      Describe the script's logic, structure, and key PowerShell techniques used.
    </section>
  </output>

  <style>
    Be concise, professional, and focused on clarity, maintainability, and scripting standards.
  </style>
</prompt>
